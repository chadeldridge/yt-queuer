package application

import (
	"fmt"
	"math/rand"
	"regexp"
	"strings"
)

// PlaybackClient.ID Notes:
// Moved away from UUIDs to reduce the size of the ID and have repeatable IDs based on the PBC name.
// This allows us to easily recover PBCs and their playlists if they have to be reconfigured.
// Entering the same name when setting a client back up should always generate the same ID and show
// the same playlist and WOL settings as before.

const (
	MAX_ID_LENGTH = 12
	// If the name is less than 24 characters, it will be padded. This allows us to easily
	// reduce to 12 characters.
	MIN_NAME_LENGTH = 24
)

var (
	idRunes    = []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-")
	regPBCID   = regexp.MustCompile("^[a-zA-Z0-9_-]{12}$")
	regPBCName = regexp.MustCompile(`^[a-zA-Z0-9 _-]{2,32}$`)
)

// PlaybackClient holds the ID and Name of a playback client.
type PlaybackClient struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

// NewPlaybackClient creates a new PlaybackClient with the given name and generates an ID.
// The name must be between 2 and 32 characters long and can only contain a-z, A-Z, 0-9, _, and -.
// The ID is generated from the name and is 12 characters long with the same character limits.
func NewPlaybackClient(name string) (PlaybackClient, error) {
	if !regPBCName.MatchString(name) {
		return PlaybackClient{}, fmt.Errorf(
			"invalid playback client name: allowed characters (min 2, max 32) a-z, A-Z, 0-9, _, -",
		)
	}

	return PlaybackClient{ID: NewPBCID(name), Name: name}, nil
}

// Validate checks if the PlaybackClient ID and Name are valid.
func (pbc PlaybackClient) Validate() error {
	if !regPBCID.MatchString(pbc.ID) {
		return fmt.Errorf("invalid playback client id")
	}

	if !regPBCName.MatchString(pbc.Name) {
		return fmt.Errorf("invalid playback client name")
	}

	return nil
}

// pad pads the string to the specified length.
func pad(r *rand.Rand, s string, length int) string {
	for i := len(s); i < length; i++ {
		s += string(idRunes[r.Intn(64)])
	}
	return s
}

// reduce reduces the string to half its length by converting pairs of characters into an idRune.
func reduce(s string) string {
	var id string
	var last int
	for i, c := range s {
		if i%2 == 0 {
			// resolve pair
			id += string(idRunes[(int(c)+last)%64])
		}

		last = int(c)
	}

	return id
}

// NewPBCID generates a new Playback Client ID. Custom id keeps the id short, repeatable, and
// unique. The id is generated by padding the input string to a 24 character string, then reducing
// it to 12 characters. The same Playback Client name will always generate the same id making it
// easy to recover Playback Clients and their playlists if they have to be reconfigured.
func NewPBCID(s string) string {
	s = strings.TrimSpace(s)
	r := rand.New(rand.NewSource(int64(len(s))))

	// Pad to 24 characters
	s = pad(r, s, MIN_NAME_LENGTH)

	id := pad(r, reduce(s), MAX_ID_LENGTH)
	for len(id) > MAX_ID_LENGTH {
		id = pad(r, reduce(id), MAX_ID_LENGTH)
	}

	return id
}
